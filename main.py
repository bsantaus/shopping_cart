# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-06-04T22:38:00+00:00

from __future__ import annotations

from typing import Optional, Union
from datetime import datetime

from fastapi import FastAPI, Path
from fastapi.responses import JSONResponse

from prometheus_fastapi_instrumentator import Instrumentator

from models import Healthcheck, Error
from routers import cart_router, item_router
from services import sc_database, custom_metrics

app = FastAPI(
    title='Shopping Cart API',
    description='Basic API providing interactions with a generic shopping cart.',
    version='0.1.0',
    servers=[
        {'url': 'http://localhost:8000', 'description': 'Local Development Server'}
    ],
)

app.include_router(cart_router, tags=["Cart"])
app.include_router(item_router, tags=["Item"])

instrumentator = Instrumentator().instrument(app)

for metric in custom_metrics:
    instrumentator.add(metric())

@app.on_event("startup")
async def _startup():
    instrumentator.expose(app)


@app.get('/check', response_model=Healthcheck, responses={'500': {'model': Error}})
def get_check() -> Union[Healthcheck, Error]:
    """
    Server Healthcheck
    """
    try:
        db = sc_database()
        return Healthcheck(
            message="Server Ready",
            database_status="Connected",
            timestamp=str(datetime.now())
        )
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content=dict(
                Error(
                    message=str(e),
                    timestamp=str(datetime.now())
                )
            )
        )
pass

